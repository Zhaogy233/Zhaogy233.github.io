<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-02-10T08:21:24.165Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>day 2</title>
    <link href="http://example.com/2023/02/10/day-2/"/>
    <id>http://example.com/2023/02/10/day-2/</id>
    <published>2023-02-10T06:14:23.000Z</published>
    <updated>2023-02-10T08:21:24.165Z</updated>
    
    <content type="html"><![CDATA[<p>今天把前几天零零碎碎的知识点整理一下</p><ol><li><p>fopen函数返回一个FILE*结构体指针，那么该指针指向什么区域？<br>答：存放在堆区。<br>因为结构体中的变量是局部变量存放在栈中，那么当函数调用结束返回时，那个指针指向的空间已经被释放，所以不是栈。<br>也不能是静态区，因为用static修饰的时候，一个变量只会被声明一次，那么在整个函数中你只能调用一次fopen，否则打开第二个文件第一个就会失效。<br>因为堆内的空间又malloc申请，由free释放所以是最佳选择。<br>小窍门：如果返回指针的函数有互逆操作（fclose与fopen），那么返回指针大概率指向堆区。</p></li><li><p>int <em>p&#x3D;(int</em>)mallloc(sizeof(int))<br>这种强制类型转换不是在解决问题，为实在掩盖问题。不强转报错的原因是没有引用&lt;stdlib.h&gt;的头文件。</p></li><li><p>linux中查看errno含义的路径<br>&#x2F;usr&#x2F;include&#x2F;asm-generic&#x2F;errno-base.h</p></li></ol><p>4.一共有三种类型的报错方式<br>打印errno&#x3D;%d;  perror(“某函数”)； 打印sterror(errno);</p><p>5.const修饰指针<br>const int<em>p &#x3D;&amp;a ：const修饰</em>p ，*p不可变（内容不可变）<br>int * const p &#x3D;&amp;a ：const修饰p，p不可变（p中地址不可变）</p><p>6.指针变量与变量指针<br>指针变量是个变量<br>变量指针是个指针，指针就是内存地址<br>p&#x3D;&amp;a ； 左边是指针变量，右边是指针</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天把前几天零零碎碎的知识点整理一下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;fopen函数返回一个FILE*结构体指针，那么该指针指向什么区域？&lt;br&gt;答：存放在堆区。&lt;br&gt;因为结构体中的变量是局部变量存放在栈中，那么当函数调用结束返回时，那个指针指向的空间已经被释放，所以不是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="http://example.com/2023/02/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2023/02/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2023-02-09T10:18:23.000Z</published>
    <updated>2023-02-09T12:59:09.276Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习了使用node，git与hexo，整理了今后一定会用到的四个指令：<br>1.hexo c 清理<br>2.hexo g 生成<br>3.hexo s 演示 （按住ctrl+左键可直接跳转到网址）<br>4.hexo d 部署到github<br>修改主题和上传博客都在这四个指令之前。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天学习了使用node，git与hexo，整理了今后一定会用到的四个指令：&lt;br&gt;1.hexo c 清理&lt;br&gt;2.hexo g 生成&lt;br&gt;3.hexo s 演示 （按住ctrl+左键可直接跳转到网址）&lt;br&gt;4.hexo d 部署到github&lt;br&gt;修改主题和上传博客</summary>
      
    
    
    
    
  </entry>
  
</feed>
