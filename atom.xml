<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-05T08:40:05.789Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>职工管理系统</title>
    <link href="http://example.com/2023/03/05/%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2023/03/05/%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-03-05T08:33:07.000Z</published>
    <updated>2023-03-05T08:40:05.789Z</updated>
    
    <content type="html"><![CDATA[<p>1.如果声明了父类，再声明子类会报错，并且即便声明了父类，如果子类在具体实现之前被使用那么编译器仍然找不到子类！即便子类与父类一起声明，只要在为定义子类之前使用他就会报错。最好的方法就是把索要用的子类写在最前面。</p><p>2.职工管理系统在哪里使用到了多态(既是：父类指针&#x3D;new 子类())？<br>答：以添加职工为例，在添加新的职工信息后，需要利用这些信息创建子类，这是用new创建子类放在右侧，用父类指针进行接收。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.如果声明了父类，再声明子类会报错，并且即便声明了父类，如果子类在具体实现之前被使用那么编译器仍然找不到子类！即便子类与父类一起声明，只要在为定义子类之前使用他就会报错。最好的方法就是把索要用的子类写在最前面。&lt;/p&gt;
&lt;p&gt;2.职工管理系统在哪里使用到了多态(既是：父类</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++ 9</title>
    <link href="http://example.com/2023/03/01/C++9/"/>
    <id>http://example.com/2023/03/01/C++9/</id>
    <published>2023-03-01T00:46:29.000Z</published>
    <updated>2023-03-01T11:21:09.990Z</updated>
    
    <content type="html"><![CDATA[<p>1.什么是虚函数？<br>答：首先虚函数必须是基类的非静态成员函数！在前面加上virtual即变为虚函数。生成虚函数后会在类内生成指针”vfptr”(在类内)，指针指向”vftable表”(不在类内)，表中是该虚函数的入口地址。</p><p>2.虚函数有什么用？<br>答：声明虚函数后，子类会继承父类的”vfptr”指针与”vftable”，在重写父类虚函数前”vftable”内函数地址与父类相同，重写会使”vftable”中父类虚函数地址被重写后函数地址覆盖。</p><p>3.什么是多态？<br>答：一：有继承关系，二：子类必须重写（函数声明一样函数体不一样）父类的虚函数。</p><p>4.C++中可以使用父类引用接收子类对象，这个特点应该结合虚函数使用，实现动态多态。</p><p>5.什么是动态多态？<br>答：动态多态的函数地址晚绑定，由于调用的对象不同，可以有多种形态去调用公共接口，运行阶段确定函数地址。当父类指针或引用(不是vfptr)指向子类对象(是父类中vftable中记录的地址被修改为子类对象的vftable中记录的初始地址)会发生动态多态。<br>具体效果是：不再是静态多态发生时只调用父类成员函数的情况，而是哪个对象使用接口就调用哪个对象的成员函数。</p><p>6.堆区属性没有释放干净会导致内存泄漏。</p><p>7.在不适用虚析构的情况下，父类指针在析构的时候，不会调用子类的析构函数，导致子类如果有队去属性，会出现内存泄漏的情况，我们要怎么处理？<br>答：与实现动态多态类似，可以在父类析构函数前加virtual实现虚析构，原理也类似，父类生成指针指向表，表中初始值为父类析构函数地址。在子类重写后表中为子类析构函数地址。与虚函数不同的是(纯)虚函数可以不要代码实现，但(纯)虚析构一定要有代码实现并一定会被执行，因为基类也可以new申请空间。</p><p>8.纯虚析构是类内声明，类外实现。只要有纯虚析构一定是抽象类，无法实例化对象。通过虚析构可以解决通过父类释放子类对象的问题。</p><p>9.除了使用虚析构还有什么方法能释放子类在堆中的对象？<br>答：新建一个类，把子类对象的指针传入，之后在新类的析构函数中释放子类对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.什么是虚函数？&lt;br&gt;答：首先虚函数必须是基类的非静态成员函数！在前面加上virtual即变为虚函数。生成虚函数后会在类内生成指针”vfptr”(在类内)，指针指向”vftable表”(不在类内)，表中是该虚函数的入口地址。&lt;/p&gt;
&lt;p&gt;2.虚函数有什么用？&lt;br&gt;答</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 1</title>
    <link href="http://example.com/2023/02/28/Linux-1/"/>
    <id>http://example.com/2023/02/28/Linux-1/</id>
    <published>2023-02-28T09:02:20.000Z</published>
    <updated>2023-02-28T09:41:05.729Z</updated>
    
    <content type="html"><![CDATA[<p>1.Linux磁盘分区的步骤？<br>答：第一步分区，第二步写入文件系统格式化，第三步给硬盘与分区起名，第四步挂载。</p><p>2.Linux文件系统格式特点？<br>答：从物理存储看&#x2F;,boot,hoom,都是地位相同的分区，但是从物理上看’&#x2F;‘是最底层的分区，boot与hoom都是’&#x2F;‘的子目录。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.Linux磁盘分区的步骤？&lt;br&gt;答：第一步分区，第二步写入文件系统格式化，第三步给硬盘与分区起名，第四步挂载。&lt;/p&gt;
&lt;p&gt;2.Linux文件系统格式特点？&lt;br&gt;答：从物理存储看&amp;#x2F;,boot,hoom,都是地位相同的分区，但是从物理上看’&amp;#x2F;‘是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>day 9</title>
    <link href="http://example.com/2023/02/28/C++8/"/>
    <id>http://example.com/2023/02/28/C++8/</id>
    <published>2023-02-28T01:08:34.000Z</published>
    <updated>2023-02-28T07:44:38.400Z</updated>
    
    <content type="html"><![CDATA[<p>1.声明重载函数的规则？<br>答：以重载关系运算符为例，判断：对象1&#x3D;&#x3D;对象2，此时使用成员函数重载会看作对象1在调用对象2。故可以写void  operator&#x3D;&#x3D;(类名  &amp;对象2).</p><p>2.什么是仿函数？<br>答：重载().</p><p>3.子类与继承的父类成员重名会怎么样？<br>答：同名子类成员会隐藏父类成员，同名子类成员函数会隐藏所有（重载）父类同名成员函数。</p><p>4.什么是菱形继承问题，要怎么解决？<br>答：继承图是一个菱形，进而导致孙子类继承了两份爷爷类的数据，而不知道使用哪个的问题。使用虚继承的方式，用virtual关键字修饰爷爷类，称为虚基类。从而使孙子所继承的成员的值是两个父亲两次赋值中的最后一次的数据。<br>注意：虚继承底层是把两个父亲继承的成员变量修改为指针，指向了虚基类的成员变量（爷爷的成员变量）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.声明重载函数的规则？&lt;br&gt;答：以重载关系运算符为例，判断：对象1&amp;#x3D;&amp;#x3D;对象2，此时使用成员函数重载会看作对象1在调用对象2。故可以写void  operator&amp;#x3D;&amp;#x3D;(类名  &amp;amp;对象2).&lt;/p&gt;
&lt;p&gt;2.什么是仿函数？&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>day 8</title>
    <link href="http://example.com/2023/02/27/C++7/"/>
    <id>http://example.com/2023/02/27/C++7/</id>
    <published>2023-02-27T00:52:49.000Z</published>
    <updated>2023-02-27T09:41:39.737Z</updated>
    
    <content type="html"><![CDATA[<p>1.this指针如何解决命名冲突的问题？<br>答：由于命名不规范导致成员函数内的参数名与类内成员名相同，进而调用成员函数给类内成员赋值时导致命名冲突，此时可使用this指针指向成员。this指向的永远是调用成员函数的对象。</p><p>2.如何理解返回this*时要求函数返回类型是[类名&amp;]而不是[类名]？<br>答：最关键的是如果返回类名，那么会调用默认拷贝构造函数创建一个新的对象，新对象内成员的值就是原对象的值！而返回值为类&amp;时相当于：类名&amp;  (被返回的)变量名&#x3D;*this（类名  &amp;变量名&#x3D;*this），返回的就是原对象本身。</p><p>3.阐述空指针有时可以调用成员函数有时却不能的原因。<br>答：空指针能调用的成员函数大都是共有的与静态成员变量类似，不属于某一个对象，所以谁都可以调用。而当空指针调用的函数使用到了成员变量时，这个成员变量是对象特有的，便不能访问。</p><p>4.怎么重载左移运算符？<br>答：在c++中只能使用全局函数重载cout&#x2F;cin，否则必须修改标准输入输出的类。右移运算符重载是要重载cout，cout是ostream类型，且cout在c++中唯一，所以使用operator时要加引用。又因为cout属于链式函数，想要链式使用必须有返回值且返回值是cout。<br>eg: ostream &amp; operator&lt;&lt;(ostream &amp;cout,类名 &amp;某对象)；(&amp;cout必须在&amp;某对象前面才能做出[cout&lt;&lt; 某对象],否则这俩位置相反，这也是无法使用成员函数重载的原因)。<br>注意：重载函数中第一个参数只是cout的别名，也可以写成out。</p><p>5.重载++运算符时如何区分前置与后置？<br>答：靠参数区分，前置++无参，后置++有int占位参数。由于后置++函数体实现依靠：先记录“类名 tmp&#x3D;*this”,再加1，最后返回tmp(是局部变量!)，并不是本身因为本身已经+1了，不是后置++要的结果。所以返回值类型不加引用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.this指针如何解决命名冲突的问题？&lt;br&gt;答：由于命名不规范导致成员函数内的参数名与类内成员名相同，进而调用成员函数给类内成员赋值时导致命名冲突，此时可使用this指针指向成员。this指向的永远是调用成员函数的对象。&lt;/p&gt;
&lt;p&gt;2.如何理解返回this*时要求函</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>day 7</title>
    <link href="http://example.com/2023/02/26/C++6/"/>
    <id>http://example.com/2023/02/26/C++6/</id>
    <published>2023-02-26T01:18:51.000Z</published>
    <updated>2023-02-26T08:49:52.846Z</updated>
    
    <content type="html"><![CDATA[<p>1.拷贝构造函数的第二种调用时机？<br>答：利用函数的值传递方式，这样操作会拷贝一份传入的对象，此时调用了拷贝构造函数。</p><p>2.拷贝构造函数的第三种调用时机？<br>答：利用函数返回值（为对象）返回局部变量的时候会调用拷贝构造，因为局部变量随着函数结束而销毁，但是返回值要求是对象，故只能拷贝生成新对象返回。</p><p>3.浅拷贝的定义以及带来的问题？<br>答：浅拷贝就是编译器提供的默认拷贝，由于栈的特性“先进后出”，一旦函数体内包含两个对象且对象里包含堆区指针，在调用析构函数时（包含delete）就会出现堆区内存重复释放的问题。</p><p>4.如何解决深拷贝带来的问题？<br>答：自己写构造函数，用new新建堆区内存代替原来直接赋值的操作。</p><p>5.本类中有其它类的对象时，时先构造哪个类，先析构哪个类？<br>答：先构造其他类的对象，在构造本身。析构恰恰相反，先析构本身。</p><p>6.如何理解静态成员变量中的“类内声明，类外初始化”？<br>答：声明就是定义个变量的意思，没有赋值操作，在类定义的外面才有初始化也就是赋值的操作。</p><p>7.由于静态成员变量是所有对象共有的所以除了用对象进行访问还可以怎么访问？<br>答：还可以用：“类名：：静态成员变量”，的方式访问。</p><p>8.为什么静态成员函数只能访问静态成员变量？<br>答：因为在类定义中的非静态成员变量不知道是哪个对象调用的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.拷贝构造函数的第二种调用时机？&lt;br&gt;答：利用函数的值传递方式，这样操作会拷贝一份传入的对象，此时调用了拷贝构造函数。&lt;/p&gt;
&lt;p&gt;2.拷贝构造函数的第三种调用时机？&lt;br&gt;答：利用函数返回值（为对象）返回局部变量的时候会调用拷贝构造，因为局部变量随着函数结束而销毁，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>day 6</title>
    <link href="http://example.com/2023/02/25/C++5/"/>
    <id>http://example.com/2023/02/25/C++5/</id>
    <published>2023-02-25T03:14:59.000Z</published>
    <updated>2023-02-28T01:28:55.083Z</updated>
    
    <content type="html"><![CDATA[<p>1.类与结构体的区别？<br>答：比较或者赋值结构体可以直接用两个结构体比较或赋值、而对于类，比较类是否相等需要单独比较其中的成员函数。</p><p>2.vs中如何使用头文件和源文件化简程序？<br>答：参考【黑马程序员匠心之作|C++教程从0到1入门编程】第105节。</p><p>3.默认构造函数（无参构造）调用的时候不要加()，加了会被编译器误以为是函数的声明，不会被编译器认为是创建对象。</p><p>4.匿名对象如何创建以及他的特点？<br>答：特点一：直接使用构造函数不给对象起名：”类名（10）；&#x2F;&#x2F;这是有参构造函数。“由于匿名对象没有名字，所以本行执行完就结束-&gt;会引发调用析构函数的操作。<br>      特点二：不能用拷贝构造函数初始化匿名对象。否则会被认为是堆被拷贝对象的二次声明。</p><p>5.无参构造函数的匿名对象怎么写？<br>答：类名（）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.类与结构体的区别？&lt;br&gt;答：比较或者赋值结构体可以直接用两个结构体比较或赋值、而对于类，比较类是否相等需要单独比较其中的成员函数。&lt;/p&gt;
&lt;p&gt;2.vs中如何使用头文件和源文件化简程序？&lt;br&gt;答：参考【黑马程序员匠心之作|C++教程从0到1入门编程】第105节。&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>day 5</title>
    <link href="http://example.com/2023/02/23/C++4/"/>
    <id>http://example.com/2023/02/23/C++4/</id>
    <published>2023-02-23T01:30:22.000Z</published>
    <updated>2023-02-23T08:16:42.238Z</updated>
    
    <content type="html"><![CDATA[<p>1.内存一共有几个区？<br>答：四个：代码区与全局区在程序运行之前就存在，栈区与堆区在程序运行后生成。</p><p>2.static与const修饰的区别？<br>答：static修饰的是静态变量放在全局区，而const修饰的是常量（其他常量），二者都在全局区。但是静态变量也是变量，也是可变的，只不过不随函数的开始和结束而创建和消亡。</p><p>3.如何利用new？<br>答：创建变量 int *p &#x3D;new int(10); delete p;     &#x2F;&#x2F;使用（）表示创建变量且值为10。<br>   ：创建数组 int *arr &#x3D;new int[10]; delete[] arr;  &#x2F;&#x2F;使用[]表示创建长度位10的数组。</p><p>4.引用的本质？<br>答：引用：int &amp;b &#x3D;a;给a取别名b，操作b等于操作a。本质就是指针常量 int * const b &#x3D;&amp;a ;b的指向不能改，但内容可以改</p><p>5.引用传递？<br>答：swap(a,b)-&gt;&gt;void swap(&amp;a,&amp;b);&#x2F;&#x2F;相当于形参中的a为实参a的别名。</p><p>6.函数的返回值可以是引用：使用int&amp;修饰函数。此时该函数可以作为左值，但是局部变量不可以被引用返回。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.内存一共有几个区？&lt;br&gt;答：四个：代码区与全局区在程序运行之前就存在，栈区与堆区在程序运行后生成。&lt;/p&gt;
&lt;p&gt;2.static与const修饰的区别？&lt;br&gt;答：static修饰的是静态变量放在全局区，而const修饰的是常量（其他常量），二者都在全局区。但是静态</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>dat 4</title>
    <link href="http://example.com/2023/02/22/C++3/"/>
    <id>http://example.com/2023/02/22/C++3/</id>
    <published>2023-02-22T01:39:06.000Z</published>
    <updated>2023-02-22T06:36:24.948Z</updated>
    
    <content type="html"><![CDATA[<p>1.Linux下的清屏操作？<br>答：system(“reset”); 需要包含头文件<stdlib></p><p>2.如何比较字符串？（char<em>）<br>答：用函数int  strcmp(const char</em> s1,const char * s2),字符串相等返回0，否则大于返回1，小于返回-1，需要包含头文件<string></p><p>3.如何比较字符串？（string）<br>答：string是c++中的类型，可以直接使用&#x3D;&#x3D;进行比较！！！</p><p>4.swicth语句中，若case代码过长，需要加{}。</p><p>5.在Linux中如果自定义函数名为黄色说明与库中函数重名。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.Linux下的清屏操作？&lt;br&gt;答：system(“reset”); 需要包含头文件&lt;stdlib&gt;&lt;/p&gt;
&lt;p&gt;2.如何比较字符串？（char&lt;em&gt;）&lt;br&gt;答：用函数int  strcmp(const char&lt;/em&gt; s1,const char * s2),</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>day 3</title>
    <link href="http://example.com/2023/02/15/C++2/"/>
    <id>http://example.com/2023/02/15/C++2/</id>
    <published>2023-02-15T05:04:51.000Z</published>
    <updated>2023-02-21T02:48:25.499Z</updated>
    
    <content type="html"><![CDATA[<p>1.const与static的区别？<br>答：const定义的常量在超出作用域后会释放，而static定义的常量不会在函数运行完后被释放。</p><p>2.如何生成随机数？<br>答：int random &#x3D;rand（）%100 ； 这样会生成0-99的假随机数。</p><p>3.如何生成真随机数？<br>答：还是使用上面的语句，但是在main函数里加srand((unsigned int)time(NULL))；并包含<ctime>的头文件。</p><p>4.为什么用string定义的字符串cout时出警告？<br>答：因为没有包含头文件<string></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.const与static的区别？&lt;br&gt;答：const定义的常量在超出作用域后会释放，而static定义的常量不会在函数运行完后被释放。&lt;/p&gt;
&lt;p&gt;2.如何生成随机数？&lt;br&gt;答：int random &amp;#x3D;rand（）%100 ； 这样会生成0-99的假随机</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>day 2</title>
    <link href="http://example.com/2023/02/10/C++1/"/>
    <id>http://example.com/2023/02/10/C++1/</id>
    <published>2023-02-10T06:14:23.000Z</published>
    <updated>2023-02-10T08:54:15.878Z</updated>
    
    <content type="html"><![CDATA[<p>今天把前几天零零碎碎的知识点整理一下</p><ol><li><p>fopen函数返回一个FILE*结构体指针，那么该指针指向什么区域？<br>答：存放在堆区。<br>因为结构体中的变量是局部变量存放在栈中，那么当函数调用结束返回时，那个指针指向的空间已经被释放，所以不是栈。<br>也不能是静态区，因为用static修饰的时候，一个变量只会被声明一次，那么在整个函数中你只能调用一次fopen，否则打开第二个文件第一个就会失效。<br>因为堆内的空间又malloc申请，由free释放所以是最佳选择。<br>小窍门：如果返回指针的函数有互逆操作（fclose与fopen），那么返回指针大概率指向堆区。</p></li><li><p>int * p&#x3D;(int * )mallloc(sizeof(int))<br>这种强制类型转换不是在解决问题，为实在掩盖问题。不强转报错的原因是没有引用&lt;stdlib.h&gt;的头文件。</p></li><li><p>linux中查看errno含义的路径<br>&#x2F;usr&#x2F;include&#x2F;asm-generic&#x2F;errno-base.h</p></li></ol><p>4.一共有三种类型的报错方式<br>打印errno&#x3D;%d;  perror(“某函数”)； 打印sterror(errno);</p><p>5.const修饰指针<br>const int * p &#x3D;&amp;a ：const修饰* p ，* p不可变（内容不可变）<br>int * const p &#x3D;&amp;a ：const修饰p，p不可变（p中地址不可变）</p><p>6.指针变量与变量指针<br>指针变量是个变量<br>变量指针是个指针，指针就是内存地址<br>p&#x3D;&amp;a ； 左边是指针变量，右边是指针</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天把前几天零零碎碎的知识点整理一下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;fopen函数返回一个FILE*结构体指针，那么该指针指向什么区域？&lt;br&gt;答：存放在堆区。&lt;br&gt;因为结构体中的变量是局部变量存放在栈中，那么当函数调用结束返回时，那个指针指向的空间已经被释放，所以不是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="http://example.com/2023/02/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2023/02/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2023-02-09T10:18:23.000Z</published>
    <updated>2023-02-09T12:59:09.276Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习了使用node，git与hexo，整理了今后一定会用到的四个指令：<br>1.hexo c 清理<br>2.hexo g 生成<br>3.hexo s 演示 （按住ctrl+左键可直接跳转到网址）<br>4.hexo d 部署到github<br>修改主题和上传博客都在这四个指令之前。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天学习了使用node，git与hexo，整理了今后一定会用到的四个指令：&lt;br&gt;1.hexo c 清理&lt;br&gt;2.hexo g 生成&lt;br&gt;3.hexo s 演示 （按住ctrl+左键可直接跳转到网址）&lt;br&gt;4.hexo d 部署到github&lt;br&gt;修改主题和上传博客</summary>
      
    
    
    
    
  </entry>
  
</feed>
