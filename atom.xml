<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-05T07:27:09.253Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>各种各样不报错的bug</title>
    <link href="http://example.com/2023/04/05/%E5%90%84%E7%A7%8D%E5%90%84%E6%A0%B7%E4%B8%8D%E6%8A%A5%E9%94%99%E7%9A%84bug/"/>
    <id>http://example.com/2023/04/05/%E5%90%84%E7%A7%8D%E5%90%84%E6%A0%B7%E4%B8%8D%E6%8A%A5%E9%94%99%E7%9A%84bug/</id>
    <published>2023-04-05T07:25:28.000Z</published>
    <updated>2023-04-05T07:27:09.253Z</updated>
    
    <content type="html"><![CDATA[<p>1.在写while的条件语句时候，如果条件语句是个复杂的表达式，一定要梳理好括号之间的关系。(&#x3D;复制给谁后)再用&lt;与谁比较.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.在写while的条件语句时候，如果条件语句是个复杂的表达式，一定要梳理好括号之间的关系。(&amp;#x3D;复制给谁后)再用&amp;lt;与谁比较.&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 并发</title>
    <link href="http://example.com/2023/04/04/Linux-%E5%B9%B6%E5%8F%91/"/>
    <id>http://example.com/2023/04/04/Linux-%E5%B9%B6%E5%8F%91/</id>
    <published>2023-04-03T23:45:45.000Z</published>
    <updated>2023-04-05T07:32:18.055Z</updated>
    
    <content type="html"><![CDATA[<p>并发分为两种：1.信号 2.线程 </p><p>所有例子写在lianxi - signal 目录下</p><p>1.什么使同步与异步<br>答：同步事件一切操作结果都已知，异步：什么时候发生什么事情不知道，发生某件事之后会产生什么结果不知道。</p><p>2.异步事件处理的常用方法<br>答：查询法(发生频率高)，通知法(发生频率稀疏)</p><p>3.信号的概念：信号使软件中断。但与中断有区别，中断是底层的硬件上的，而信号是软件上的应用层的。信号的响应依赖于中断。</p><p>4.signal<br>void (*signal(int signum,void(*func)(int))) (int); 这是一个返回类型是函数指针的函数声明，该函数的参数是一个int类型和一个函数指针。<br>这种写法比man手册中标准c写法好，这种少站一个名字，防止命名冲突<br>eg star.c<br>信号会打断阻塞的系统调用！！！所以以前写read，write的函数中报错的时候会把SIGINT当作错误设置errno为EINTR，要想使Ctrl+c不打断函数的打开和读写，就添加do while循环，使即便收到假错(Ctrl+c)也继续执行。<br>有图</p><p>5.用kill -l命令查看当前系统的所有信号<br>前31号为标准信号，34之后为实时信号</p><p>6.信号的行为不可靠：程序的执行现场是由内核布置的，有可能第一次还没执行结束就开始第二次调用，像递归但不是。</p><p>7.可重入函数，解决信号不可靠问题。<br>所有的系统调用都是可重入的函数(反过来不成立)，一部分库函数也是可重入的，如：memcpy，函数名_r(_r就是可重入的意思)，这些函数都可用于信号处理函数之中。</p><p>8.信号的响应过程<br>信号从收到到相应有一个不可避免的延迟<br>思考：如何忽略掉一个信号？SIG_IGN就是把指定的信号的mask位永远置为0.<br>思考：标准信号为什么会丢失？一次中断内来了10次同一信号，首先p置1-&gt;m&amp;p为1-&gt;m&#x3D;0,p&#x3D;0，此时再来9个信号-&gt;m&#x3D;0,p&#x3D;1,执行结束-&gt;m&#x3D;1,p&#x3D;1-&gt;再执行一次。所以来10次信号，就执行了2次。<br>标准信号的响应没有严格的顺序。<br>具体执行过程如下：<br>每一个进程都会维护一组位图，在信号响应过程中，一个进程会维护两个位图一个叫mask初始值32位1，一个叫pending初始32位0。<br>当程序执行过程中未收到信号的时候：程序运行时间片结束抱着现场扎入内核，保存地址用于返回，等待调度。当调度到来时系统会按位与mask&amp;pending，如果结果为0，说明没有信号到来，那么原路返回继续执行。<br>某一时刻收到信号：进程抱着现场扎内核，并将pending的某一位改为1，后进入等待状态，当调度到来时先mask&amp;pending发现某一位为1，此时不返回到原地址，此时把那一位mask与pending同时置0，之后进入signal函数的调用，把返回地址修改为你给的函数地址，等待执行结束后再次扎入内核，并将mask值修改为1，返回地址修改为原函数，再次调度后继续mask&amp;pending若结果为0，则继续执行原函数。</p><ol start="9"><li>kill()用来发信号的<br>raise()给当前进程发信号<br>alarm() eg：alarm.c，调用alarm(n)函数,会在n秒后发出SIGALRM信号，并执行后续代码，如果没有使用signal函数处理这个信号，程序会直接结束。<br>pause()是一个人为创造的阻塞系统调用，等待一个信号来调用它，非常适合与死循环搭配。当sleep由alarm和pasue封装的时候，最好不要用这个sleep。<br>综合eg：5sec.c，5sec_sig.c<br>gcc 5sec_sig.c -O1 这是优化的意思<br>gcc -S 5sec_sig.c 这是汇编的意思<br>漏桶流控实例eg：slowcat.c。漏桶的意思是即便来了十个数据也不紧不慢的每次读取10个。<br>令牌桶eg：slowcat2.c</li></ol><p>10.写一个令牌库，用于流量控制 mytbf。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;并发分为两种：1.信号 2.线程 &lt;/p&gt;
&lt;p&gt;所有例子写在lianxi - signal 目录下&lt;/p&gt;
&lt;p&gt;1.什么使同步与异步&lt;br&gt;答：同步事件一切操作结果都已知，异步：什么时候发生什么事情不知道，发生某件事之后会产生什么结果不知道。&lt;/p&gt;
&lt;p&gt;2.异步事件</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 进程</title>
    <link href="http://example.com/2023/03/30/Linux-%E8%BF%9B%E7%A8%8B/"/>
    <id>http://example.com/2023/03/30/Linux-%E8%BF%9B%E7%A8%8B/</id>
    <published>2023-03-30T06:07:34.000Z</published>
    <updated>2023-04-03T07:31:18.886Z</updated>
    
    <content type="html"><![CDATA[<p>1.进程标识符 pid，它的类型位pid_t为16位有符号整型数，但只能用非负的，由于每个系统不同，所以位数不同，比较保险的情况是转换为longlong类型输出。<br>用ps命令查看进程 axf  ，axm ， ax -L<br>进程号是顺次向下使用1-&gt;2-&gt;3,2释放了2,下次使用时使用4<br>getpid(),不用传参，哪个进程在使用返回值就是哪个继承的pid<br>getppid()</p><p>2.进程的产生<br>the calling process 是当前进程的意思<br>fork(),也是执行一次返回两次的函数，当父进程调用fork函数的时候，会创建一个子进程，其内容与父进程一模一样，连执行的位置都一样，除了一些不一样。<br>fork后父子进程的区别：fork的返回值不一样，pid不同，ppid也不同，未决信号和文件锁不继承，资源利用量归零<br>init进程：是一号进程，是所有进程的祖先进程，而不一定时父进程，当用ps axf查看时，如果最右侧的串是顶格写的，那么它的父进程是init<br>写个小程序fork1.c练习<br>调度器的调度策略来决定哪个进程先运行，不要凭空猜测父子进程谁新运行。<br>fflush()的重要性。<br>创建之后父子进程同组，父进程是组长。</p><p>3.time命令给出的time信息不属于标准输出，无法重定向</p><p>4.写一个程序primer1.c实现201个子进程来查找30000000-30000200中的质数。</p><p>5.连续两次使用ps -axf结果为什么一样？<br>答：因为没有用kill杀死上一个进程。</p><p>6.谁创建谁释放，如果父进程创建子进程，那么子进程结束后会变为僵尸态，等父进程收尸，如果父进程不收尸直接结束，那么子进程会编程孤儿态，由init进程接管。</p><p>7.当父进程数据量过大，但又想创建子进程实现简单功能，此时直接fork会很浪费，那怎么办？<br>答：可以用vfork。以前的fork创建的子进程会完全拷贝父进程数据并创建一份新的空间给自己用，所以出现vfork使创建的子进程与父进程的位置不同，但指针指向的数据块位置相同，这样可以让子进程完成简单的操作，但也只能用这些函数(exec函数族)，所以后来给fork增加了写时拷贝的功能 ，fork做了改进，创建的子进程与父进程指向同一数据块，父与子无论谁想写改数据都可以，谁想改谁就复制一份，之后一直指向复制的那一份。</p><p>absolute value是绝对值的意思</p><p>8.进程的消亡及释放资源(收尸)<br>wait(int * status)，wait的意思使等待进程状态改变，再man手册看到时，可以翻译为收尸。该函数用来收尸，并获得被收尸的子进程信息，放在&amp;status里.详情见primer2.c<br>waitpid()<br>waitid()<br>wait3()<br>wait4()</p><p>9.并发的三种算法<br>分块，交叉分配，池<br>池：上游不断向容器中分配任务，下游好几个进程线程抢任务。<br>eg：用交叉分配法算质数primern.c</p><p>10.exec函数族:用一个全新的进程映像替换目前进程映像，全新的进程是谁，干什么都用exec函数族中的函数实现，但是pid不变<br>execl()，第二个参数相当于argv[0],第三个参数相当于argv[1].<br>execlp()<br>execle()<br>execv()<br>execvp()<br>eg：ex.c<br>char * 对应的东西应该写在””内<br>注意：要在exec前调用fflush，因为exec创建新的进程映像，如果不fflush，原程序调用到exec就被没有了，包括缓冲区的内容，直接生成新进程。</p><p>11.few(fork,exec,wait)搭建了整个unix世界<br>eg:few.c，这就解释了为什么shell创建的子进程是自己定义的而不是另一个shell。</p><p>12.一个命令的二进制可执行文件存放在磁盘上，这个命令叫外部命令，其余都叫内部命令(比如目录管理，进程消亡怎么处理，调度等)。</p><p>13.实现shell的外部命令处理：myshell.c</p><p>14.用户权限和组权限,鉴定权限的时候用的是effective id<br>u+s&#x2F;g+s<br>无u+s&#x2F;g+s用ls显示的权限是rwx，当给一个用户添加u+s权限后，他的权限会变成rws，意味着当别的用户调用当前可执行文件的时候，他的身份会切换位当前这个二进制文件的user身份来执行，这个切换的过程都是由exec函数识别和完成的。<br>getuid(),geteuid()<br>getgid(),getegid()<br>setuid(),setgid()<br>setreuid(),setregid()原子化交换<br>seteuid(),setegid()<br>eg:mysu<br>写完程序正常执行.&#x2F;mysu 0 cat &#x2F;etc&#x2F;shadow肯定不能执行，这就要用到u+s了，用su切换为root把文件所有者user改为root，把文件权限改为u+s，之后再执行就会成功。<br>0代表root用户</p><p>15.命令解释器<br>脚本的第一句话：#! &#x2F;bin&#x2F;bash  ，其中#!为脚本标志，他后面的是命令解释器或可执行文件，该解释器或可执行文件会解释这个脚本文件所有命令。<br>eg:cmdit</p><ol start="16"><li>system可以堪为few的简单封装,是调用shell解决的<br>eg： sys.c&#x3D;&#x3D;sys1.c</li></ol><p>17.守护进程：在后台运行不受任何终端控制<br>会话：终端的登录产生一个标准的会话session，其标识为sid<br>终端(一台只会输入输出的计算机)<br>进程组运行在前台与后台，前台进程组有且最多只能有一个<br>setsid()<br>getpgrp()<br>getpgid()<br>setpgid()<br>ps axj:ppid(父进程id) pid(进程id) pgid(进程组id) sid(会话id) tty(控制终端：？意味脱离) tpgid(值为-1代表是守护进程)<br>单实例守护进程：锁文件 &#x2F;var&#x2F;run&#x2F;name.pid,使一个守护进程只有一个在跑<br>启动脚本文件：&#x2F;etc&#x2F;rc* , 让某守护进程开机自启动，后面加&amp;，意思是放到后台运行。</p><p>18.怎么判断一个进程是不是守护进程？<br>答：因为守护进程会一直运行，不需要父进程收尸，所以要求父进程创建完子进程后推出，这就导致了子进程由init也就是1号进程接管，所以守护进程的ppid为1，又因为守护进程必须是组长，所以pid&#x3D;pgid&#x3D;sid，且tty为?.</p><p>19.写一个守护进程mydaemon.c<br>其中出现了很多问题：1.chidr改完路径后，写的文件都得在修改后的路径操作，2.由fork创建的子进程其父进程退出后，并不是由1号init接收，而是由&#x2F;sbin&#x2F;upstart接收，他是图形化界面下的守护进程。<br>小结：有时候结果不是想象中的模样不一定是代码的问题。</p><p>20.系统日志 &#x2F;var&#x2F;log&#x2F;<br>syslogd服务<br>openlog() 没有返回值意味着不会出错<br>syslog()<br>closelog()</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.进程标识符 pid，它的类型位pid_t为16位有符号整型数，但只能用非负的，由于每个系统不同，所以位数不同，比较保险的情况是转换为longlong类型输出。&lt;br&gt;用ps命令查看进程 axf  ，axm ， ax -L&lt;br&gt;进程号是顺次向下使用1-&amp;gt;2-&amp;gt</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 进程环境</title>
    <link href="http://example.com/2023/03/29/Linux-%E8%BF%9B%E7%A8%8B%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2023/03/29/Linux-%E8%BF%9B%E7%A8%8B%E7%8E%AF%E5%A2%83/</id>
    <published>2023-03-29T03:49:19.000Z</published>
    <updated>2023-03-30T06:25:42.857Z</updated>
    
    <content type="html"><![CDATA[<p>1.进程的终止有几种情况？分别是什么？<br>正常的终止<br>    从main函数返回<br>    调用exit<br>    调用_exit或_Exit<br>    最后一个线程从其启动例程返回<br>    最后一个线程调用pthread_exit</p><p>异常终止<br>    调用abort<br>    接到一个信号并终止<br>    最后一个线程对其取消请求做出相应</p><p>2.main函数返回值给谁看的？<br>答：给父进程看的，在linux环境下一般程序的父进程时shell，可以用echo $?打印上一个可执行程序的返回值。</p><p>3.什么是钩子函数？<br>atexti()函数是钩子函数，类似c++中的析构函数，用来挂载要释放的空间或关闭文件，调用exit时会逆序调用所有函数。<br>但是调用_exit()时会直接终止程序，不调用钩子函数也不执行IO清理，一般在程序出错的时候，比如写越界的时候调用_exit()，为了即时终止程序，防止问题扩大，也可以调用abort()阻止污染扩散。<br>写一个函数atexit.c解释钩子函数。atexit函数要自己定义，在man手册中把atexit换成自己要写的函数名即可，函数内容也是自己写。，但是在调用的时候要用atexit(自定义函数的函数名)</p><p>4.命令行参数解析<br>getopt(),该函数的第三个参数opstring是命令行选项的意思但是不带-;<br>getopt_long();<br>用这俩函数写一个mydate.c可以用-y:year,-m:month,-d:day,-H:hour,-M:minute,-S:second，显示想要的信息<br>当getopt函数的第三个参数后面！加冒号的时候，说明该选项可以附加条件，命令行传参是该参数后面的串默认传入char * optarg(这个变量是全局变量，已经定义好的)中，这个附加条件是给程序员看的，程序员根据这个附加条件去写相应的功能<br>man手册中用extern定义的变量都是全局变量<br>在optstring中如果不加-,函数不认识非选项传参(路径，名称等)，加-后可以识别，且返回值为1。非选项参数的位置是optind-1.</p><p>5.用export来查看环境变量，一个目录下的环境变量被更改不影响其他目录，环境变量的格式是key&#x3D;value，value的值改变，命令行也会发生改变。</p><p>6.bin表示的是二进制文件，所有的二进制文件会在环境变量的path路径中。</p><p>7.environ是char**类型与argv一样，里面存放着所有的环境变量，与argv不同的是environ没有像argc一样的计数器，故在写循环的时候要把循环推出条件写为environ[i]!&#x3D;NULL; 用extern char ** environ;声明。<br>getenv(),向你要关键字，返回一个value值。<br>setenv(),如果key存在就改变，如果key不存在就添加,overwrite为真就覆盖，否则不覆盖。</p><p>8.命令ps axf查看当前进程关系，可得到进程号，命令 pmap + 进程号，看内存空间分布情况。</p><p>9.man手册中小心link with，这句话意味着你在链接的时候要加上某项。</p><p>10.在打开方式的参数中，有_lazy懒惰方式，意思是用的时候在打开。</p><p>11.如何理解 man手册中的double (*cosine) (double)？<br>答：(*cosine)意味着cosine是指向函数的指针，函数参数和返回值都是double</p><p>12.如何理解*(void ** )( &amp;cosine)?<br>答：cosine是函数指针，取地址变为二级指针，强转为void*<em>，后解引用为void</em></p><p>13.函数跳转，随着main函数的调用不断有函数压栈，当到达目标栈时，得到数据后想要直接回到初始状态，而非一层层弹栈的话，需要以下函数比goto安全。<br>setjmp()，设置跳转点，如果正在设置跳转点，返回值为0，如果从longjmp返回，那么返回值非0，参数位全局变量，该函数是执行一次返回两次的函数。<br>longjmp()，从哪个位置跳回某跳转点 ，第二个参数位该函数要带回去的内容<br>__FUNCTION__是由gcc提供的宏，用来调试程序，会自动识别。<br>利用上述函数写函数jump.c来练习。</p><p>14.资源的获取及控制<br>getrlimit(),用来获取资源总量<br>setrlimit()。用来设置资源总量<br>上述两个函数封装位ulimit</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.进程的终止有几种情况？分别是什么？&lt;br&gt;正常的终止&lt;br&gt;    从main函数返回&lt;br&gt;    调用exit&lt;br&gt;    调用_exit或_Exit&lt;br&gt;    最后一个线程从其启动例程返回&lt;br&gt;    最后一个线程调用pthread_exit&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 系统数据文件和信息</title>
    <link href="http://example.com/2023/03/28/Linux-%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E5%92%8C%E4%BF%A1%E6%81%AF/"/>
    <id>http://example.com/2023/03/28/Linux-%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E5%92%8C%E4%BF%A1%E6%81%AF/</id>
    <published>2023-03-28T11:49:48.000Z</published>
    <updated>2023-03-29T03:48:08.386Z</updated>
    
    <content type="html"><![CDATA[<p>1.当我想要都取用户的名称或id信息时，我可以区&#x2F;etc&#x2F;passwd或&#x2F;etc&#x2F;groupc查看，但不可以在程序中直接对这俩文件进行getline等操作，想获得id名字等信息可以使用如下操作。<br>getpwuid();getpwname();<br>getgrgid();getgrgrnam();</p><p>2.对于&#x2F;etc&#x2F;shadow这个文件更是只有root才能查看，所以用下面两个函数进行读取。<br>getspnam()，该函数需要root权限，用来查找命令行给出用户的在shadow中所有信息，返回一个结构体指针;<br>getpass()这个函数会读取用户密码，给一个串，但不回显;<br>crypt()调用这个函数之前应该先定义一个宏，还要包含一个链接,这个函数第二个参数只识别$ab$xx$,ab指的是加密方式，xx指的是要加密的密码，该函数用来给第一个参数用第二个参数指定的模式进行加密;</p><p>3.atoi()函数把字符型转为整型，因为命令行参数可能是数字也可能是串变量，所以用char<em>接受，但是有时候传数字，我们不能直接使用char</em>类型 ，所以使用atoi转换为整型。</p><p>4.时间戳，主要研究哪三个类型之间的转化？<br>计算机喜欢的time_t类型，人类喜欢的char*类型，还有程序员喜欢的struct_tm类型<br>time()，该函数两种用法分别写在timelog.c与100days.c中；<br>gmtime();<br>localtime(),该函数返回值在静态区，第二次调用时会把第一次调用结果冲掉，这两函数的都是把time_t类型转换为struct_tm类型;<br>mktime()，该函数把struct_tm转换为time_t类型;<br>strmtime()，用来从struct_tm读取char数据给用户看;<br>用上述函数写一个函数timelog.c.</p><p>5.%-4d是什么意思？<br>答：-指的是左对齐，4d指的是宽度为4的整型。</p><p>6.除了标准终端设备，其他模式默认为全缓冲模式，所以用fprintf向文件写的时候”\n”不能在刷新缓冲区，所以要用fflush强制刷新。</p><p>7.以timelog.c为基础写一个函数100days.c，能给出当前日期100天后的日期，用tail-f可以动态查看文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.当我想要都取用户的名称或id信息时，我可以区&amp;#x2F;etc&amp;#x2F;passwd或&amp;#x2F;etc&amp;#x2F;groupc查看，但不可以在程序中直接对这俩文件进行getline等操作，想获得id名字等信息可以使用如下操作。&lt;br&gt;getpwuid();getpw</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux解析读取目录及其内容</title>
    <link href="http://example.com/2023/03/25/Linux%E8%A7%A3%E6%9E%90%E8%AF%BB%E5%8F%96%E7%9B%AE%E5%BD%95%E5%8F%8A%E5%85%B6%E5%86%85%E5%AE%B9/"/>
    <id>http://example.com/2023/03/25/Linux%E8%A7%A3%E6%9E%90%E8%AF%BB%E5%8F%96%E7%9B%AE%E5%BD%95%E5%8F%8A%E5%85%B6%E5%86%85%E5%AE%B9/</id>
    <published>2023-03-25T08:38:12.000Z</published>
    <updated>2023-03-31T03:38:13.272Z</updated>
    
    <content type="html"><![CDATA[<p>1.解析目录有几种方法都是什么？<br>答：两种，第一种：利用glob,globfree解析通配符.第二种：把目录文件当作流来处理opendir(),closedir(),readdir(),rewinddir(),fseekdir(),seekdir(),telldir().<br>glob函数解析通配符(*匹配字符串，？匹配单个字符)<br>要求用glob.c实现法1，用opendir.c实现法2.<br>glob_t中gl_pathv与argv也是相同的存储格式</p><p>2.对于各种函数中的结构体，有的声明时候直接用结构体名才不报错，有的结构体名前必须加struct才不报错。报错的时候就试试另一种。</p><p>3.int64_t &#x3D;&#x3D; long long </p><p>4.du命令，显示当前文件或目录所占用的字节大小，以k位单位。</p><ol start="5"><li>(&#x2F;.*)是&#x2F;目录下所有的隐藏文件</li></ol><p>6.strncpy拷贝字符串，strncat追加字符串,strcpy也是拷贝但这个函数容易出现越界访问的问题，函数strrchr：第一参数位字符串，第二参数为整型，如果想表示符号可以用’&#x2F;‘这个结果是整型，””这个中间的是串常量，该函数用来寻找整个传中最右边的’&#x2F;‘.</p><p>7.写一个mydu.c的函数实现du的功能。<br>解：du命令用来回显当前路径文件大小，或者指定路径文件大小，故先要给定文件。所以区分文件有两种，一种是目录文件，一种是非目录文件，非目录文件直接返回大小，而目录文件要进行递归操作。在获取文件信息的时候要使用lstat因为符号链接文件大小的计算不能以源文件大小来衡量。<br>由于找文件大小首先需要文件名，所以要用到glob解析函数，但是文件又有隐藏和非隐藏两种类型，所以解析路径的模式匹配符号有’<em>‘与’.</em>‘,用glob解析会解析到’.’与’..’文件，所以会产生致命问题，这个递归一直在’.’与’..’之间来回循环，所以我们要添加一个函数来判断。因为.在&#x2F;后面所以用strrchr来找&#x2F;,返回这个位置指针，加1就是.&#x2F;..的为位置。<br>这个函数也可以用目录流的方式再写一遍。</p><p>8.如何优化一个递归函数？<br>答：如果一个变量单纯的使用在递归之前或者递归之后，那么该变量可以优化到静态区或者全局区，只需要在该变量前面加上static。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.解析目录有几种方法都是什么？&lt;br&gt;答：两种，第一种：利用glob,globfree解析通配符.第二种：把目录文件当作流来处理opendir(),closedir(),readdir(),rewinddir(),fseekdir(),seekdir(),telldir(</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 文件系統</title>
    <link href="http://example.com/2023/03/25/Linux-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%B5%B1/"/>
    <id>http://example.com/2023/03/25/Linux-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%B5%B1/</id>
    <published>2023-03-25T00:46:17.000Z</published>
    <updated>2023-03-25T08:36:09.738Z</updated>
    
    <content type="html"><![CDATA[<ol><li>&#x2F;etc&#x2F;passed下面记录了各个用户的信息，有用户id<br>&#x2F;tec&#x2F;group记录用户组信息</li></ol><p>2.如何查看文件具体信息？<br>答：stat命令与fstat,lstat函数，stat命令由stat函数封装。另外使用vim -t命令可以查看类型属性，前提是安装ctags。<br>stat:通过文件路径获取文件属性，面对符号链接文件时获取的是源文件而不是快捷方式。<br>fstat:通过文件描述符获取文件属性。<br>lstat:面对符号链接文件时获取的是快捷方式。<br>eg：利用stat函数写一个flen.c函数实现读取文件大小的功能：要利用一个也叫做stat的结构体，声明结构体前要加struct不然不识别，结构体变量中指定size的是off_t类型属于long型，用static写在函数返回值之前的作用是禁止函数的外部扩展。</p><p>3.在stat的属性中blksize指的是块大小，一般为512字节，blocks指的是块数，二者之积为文件在磁盘上的实际大小。而size只是个属性。st_mode变量类型是一个16位的位图里面存放01，用来判断文件类型，所以它声明的变量mode_t为16位整型数(3位文件类型，9位文件读写执行属性，三位特殊)</p><p>4.什么是空洞文件，如何创建？<br>答：使用lseek函数来修改新打开文件的读写位置，使起始为0，偏移为5g(5ll<em>1024ll</em>1024ll*1024ll-1ll这么设置偏移量)就创建了一个大小为5g空洞文件实际站4k空间，里面的数据全部是’\0’,所以叫空洞文件，其实不写入数据的时候空洞文件不占用空间，对空洞文件使用cp命令生成的文件也不占用磁盘空间。此外还有还可以利用该函数的返回值来计算文件大小。<br>eg:请写函数big.c来创建5g大小的空洞文件，并查看实际大小。小提示3个3位为1g</p><p>5.七种文件dcb-lsp:目录，字符，块，普通，符号链接，socket,命名管道named piped</p><p>6.两种文件系统:FAT适合存储小文件，UFS适合存储大文件。</p><p>7.用link函数可以创建硬链接，用unlink可以解除链接，那么unlink与rm的区别？<br>答：对于用open打开的文件，unlink会删除文件名保留fd使其成为匿名文件，而由rmdir函数实现的rm命令连fd也会删除。</p><p>8.umask函数封装umask命令，chomd封装chomd命令，rename封装mv命令,remove类似rm,mkdir函数封装mkdir,chdir,fchdir(这俩函数能突破假根技术chroot)封装cd,getcwd封装pwd，</p><p>9.利用utime命令可以修改a&#x2F;m.time.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&amp;#x2F;etc&amp;#x2F;passed下面记录了各个用户的信息，有用户id&lt;br&gt;&amp;#x2F;tec&amp;#x2F;group记录用户组信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.如何查看文件具体信息？&lt;br&gt;答：stat命令与fstat,lstat函数，stat命令</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux IO总结</title>
    <link href="http://example.com/2023/03/23/Linux-IO%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/03/23/Linux-IO%E6%80%BB%E7%BB%93/</id>
    <published>2023-03-23T10:02:22.000Z</published>
    <updated>2023-03-23T10:23:35.381Z</updated>
    
    <content type="html"><![CDATA[<p>标准IO函数<br>fopen(),fclose()<br>fgetc(),fputc()<br>fgets(),fputs()<br>fread(),fwrite()<br>printf(),scanf()<br>fseek(),ftell(),rewind(),fseeko(),ftello()<br>fflush();<br>getline();</p><p>系统IO<br>open,close,read,write,lseek<br>dup,dup2<br>sync,fsync,fdatasync<br>fcntl<br>ioctl</p><p>编程要有思想<br>1.不要内存泄漏<br>2.不要访问越界<br>3.要把main函数当成模块，怎么取来怎么还原</p><p>本章重点例子函数<br>mycp<br>dup2<br>getline<br>删除文件的第十行(一个进程中对同一份文件打开两次，一个读，另一个写，最后用truncate来调整文件长度)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;标准IO函数&lt;br&gt;fopen(),fclose()&lt;br&gt;fgetc(),fputc()&lt;br&gt;fgets(),fputs()&lt;br&gt;fread(),fwrite()&lt;br&gt;printf(),scanf()&lt;br&gt;fseek(),ftell(),rewind(),fsee</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux I/O</title>
    <link href="http://example.com/2023/03/20/Linux-I-O/"/>
    <id>http://example.com/2023/03/20/Linux-I-O/</id>
    <published>2023-03-20T00:28:38.000Z</published>
    <updated>2023-03-23T10:22:09.047Z</updated>
    
    <content type="html"><![CDATA[<p>1.fprintf是向文件中输入数据，用第一个参数指定哪个文件。但是第一个参数可以是stderr，stderr叫做标准出错固定向屏幕输出，不需要换行操作，执行文件就输出。除了第一个参数外，后两个参数与printf一样。</p><p>2.perror()是自动关联全局变量errno报错的函数，他俩一起包含在头文件&lt;errno.h&gt;中，perror里只需传入一串字符，可以是任意字符，就能完成报错任务。</p><p>3.static定义的静态变量在全局区，但一个变量名只被能定义一次。</p><p>4.ulimit -a查看一个进程中最多打开文件数目1024。</p><p>5.linux的有一种神奇的参数叫命令行参数。意思是在a.out执行的命令行后面可以加入参数传给main函数。参数是main函数的参数。<br>int main(int argc,char * argv[]){}<br>int main(int argc,char** argv){}<br>第一个参数是自动识别命令行中输入多少数据，第二个参数维护一个数组，数组中存放着从命令行输入的数据(可以是数字也可以是字符)，数组中第零号位置存放的是文件的名称。</p><p>6.在使用fclose函数的时候先关闭依赖别人的文件，再关闭被依赖的文件。</p><p>7.连续写两个fopen函数时的注意事项！<br>答：当第一个文件打开成功，但是第二个文件打开失败时，程序就会终止运行，此时已经出现内存泄漏，因为两个连续的fopen函数调用的存在，而无法关闭第一个fopen打开的文件。此时应该再第二个fopen函数打开失败的if语句里提供关闭第一个文件的close函数。</p><p>8.printf函数打印的时候使用行缓冲，一行缓冲区不满就不会打印，但是用\n或者fflush强制刷新可以完成打印操作。stderr属于无缓冲。</p><p>9.为了弥补getc,gets,scanf缺点，能实现完整获取一行内容而不论一行多长的函数是？<br>答：getline函数，但要初始化存放读取长度的size_t类型(整型)linesize&#x3D;0，将这个linesize的地址当第二个参数传入。第一个参数是一个char *，将char *的地址当第一个参数传入。该函数返回值时读取的字节数，函数通过realloc实现的。因为这个函数每次开辟的空间地址是第一个参数，长度是第二个参数，所以即便引发内存泄漏(因为该函数是GNU中的方言，知道源码可以free，但不在linux下使用的话不知道源码不能直接free，所以不能盲目free)也是可控的内存泄漏。用strlen可以读取linebuf的长度。</p><p>10.创建临时文件的两个函数？<br>答：tmpnam与tmpfile。tmpnam先申请名字，再创建文件，这两步操作不是原子操作，所以当多个进程使用时可能冲突。而tmpfile更优秀，直接创建FILE*的匿名文件，用ls看不见，但磁盘上确实存在，可以直接对文件操作，充分体现了临时性，即便没用close关闭，也会随着程序执行结束而关闭。</p><p>11.系统io也叫文件io与标准io概念？<br>答：标准io中FILE<em>贯穿始终，而系统io由fd文件描述符贯穿始终。标准io就是根据文件生成FILE</em>的结构体，而系统io时通过文件inode信息生成结构体，但结构体不给你看，把结构体的地址放在一个长度为1024(一个进程中这么多)的数组中。其中0是标准输入也就是键盘stdin，1存放的是标准输出stdout，2存标准出错stderr。</p><p>12.对于同名函数如何区别是重载还是变参？<br>答：传入多个参数调用函数，如果不出error就是变参比如printf，如果出错就是重载。</p><p>13.系统io与标准io区别？<br>答：标准io是在缓冲完一行或者刷新后才输入输出数据，所以标准io吞吐量大，而系统io是直接对数据进行输入输出，速度快。对于用户来讲，体验更直观的是吞吐量。这两种io都会维护一个结构体，但结构体中的pos指针(实现lseek)指向完全不一样。</p><p>14.fd与FILE*相互转换的函数。<br>答：fileno，fdopen</p><p>15.strace命令查看可执行文件使用的系统调用。</p><p>16.数据与亚数据的定义。<br>答：数据是指文件内容，亚数据是指文件时间权限等。</p><p>17.在命令行后加入需目录&#x2F;dev&#x2F;fd会显示当前目录下的文件描述符的信息，谁调用显示谁。</p><p>18.fseek，ftell，rewind<br>fseek用来设置文本指针的位置，ftell用来给出当前指针pos位置相对与文件首的位置，rewind用来重置指针位置为文件首。<br>缺点因为ftell的返回值是long类型有正有负。但是ftell函数定义出错时返回-1，所以有关负数的部分都用不了。但是fseek的第二个参数偏移量也是long类型，所以定义一个文件位置指针最长可找到4g。但是ftell返回值最大2g这就造成冲突。<br>故建议使用GNU方言fseeko，ftello。</p><p>19.fflush（）<br>该函数用来将缓冲区内容写到stream中，有多个文件都需要刷新时参数为空即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.fprintf是向文件中输入数据，用第一个参数指定哪个文件。但是第一个参数可以是stderr，stderr叫做标准出错固定向屏幕输出，不需要换行操作，执行文件就输出。除了第一个参数外，后两个参数与printf一样。&lt;/p&gt;
&lt;p&gt;2.perror()是自动关联全局变量e</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>shell</title>
    <link href="http://example.com/2023/03/18/shell/"/>
    <id>http://example.com/2023/03/18/shell/</id>
    <published>2023-03-18T06:41:48.000Z</published>
    <updated>2023-03-18T06:43:00.840Z</updated>
    
    <content type="html"><![CDATA[<p>1.src&#x3D;$()是什么意思？<br>答：将括号内执行结果赋值给变量src。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.src&amp;#x3D;$()是什么意思？&lt;br&gt;答：将括号内执行结果赋值给变量src。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>makefile</title>
    <link href="http://example.com/2023/03/18/makefile/"/>
    <id>http://example.com/2023/03/18/makefile/</id>
    <published>2023-03-18T01:49:09.000Z</published>
    <updated>2023-03-30T06:51:36.290Z</updated>
    
    <content type="html"><![CDATA[<p>1在linux环境下如何以最简单的方式实现vs中简化代码的操作(头文件与源文件分开写)?<br>答：用多文件连编:g++ text.c add.c sub.c div1.c -o a.out。</p><p>2.上述实现方式有什么问题？怎么解决？<br>答：当其中一个文件改变时，却需要所有文件跟着一起编译，这样非常耗时。应该各自编译各自的生成.o文件，最后再链接到一起，由此引出makefile工程管理器。</p><p>3.makefile三个重点：一个规则；两个函数；三个自动变量。</p><p>4.创建头文件<br>#ifndef <em>HEAD_H</em><br>#define <em>HEAD_H</em><br>所包含的头文件<br>#endif</p><p>5.在大小写makefile都存在的时候，调用make优先调用小写的makefile</p><p>6.在一个有很多.c文件的目录中想要具体执行哪一个时，要用make text ,而不是make text.c，虽然写vi的时候的文件名时text.c，此时make出的可执行文件就叫text。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1在linux环境下如何以最简单的方式实现vs中简化代码的操作(头文件与源文件分开写)?&lt;br&gt;答：用多文件连编:g++ text.c add.c sub.c div1.c -o a.out。&lt;/p&gt;
&lt;p&gt;2.上述实现方式有什么问题？怎么解决？&lt;br&gt;答：当其中一个文件改</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux 命令</title>
    <link href="http://example.com/2023/03/15/linux-%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2023/03/15/linux-%E5%91%BD%E4%BB%A4/</id>
    <published>2023-03-15T01:46:52.000Z</published>
    <updated>2023-03-29T04:22:51.089Z</updated>
    
    <content type="html"><![CDATA[<ol><li>-a 与 -r有什么区别？<br>答：-a是以全部的方式(cp)或显示隐藏文件(ls)，-r是以递归的方式。例如在cp拷贝的过程中：使用-a会把原来的时间也拷贝过来，但用-r就会以拷贝的时间作为新文件最后使用的时间。</li></ol><p>2.hello.*是什么意思？<br>答：是以hello.为前缀的所有文件。eg：hello.cpp,  hello.c,  hello.java</p><p>3.cat的用法？<br>答：一：显示文件内容。二：单写cat可以实现你写一行命令，系统复制一遍再输出的操作，也称作回显。三：可以用tac倒着输出文件内容。</p><ol start="4"><li>-atime   按照访问时间attand<br> -mtime 按照修改属性时间modify<br> -ctime   按照修改文件时间change</li></ol><p>5.umask是干什么的？<br>答：它为touch的新文件提供掩码，该掩码作用于文件属性rwx，但是os默认新建文件没有执行能力，故没有x，所以rwx+111+掩码&#x3D;777,但可以自定义掩码：umask 511.只要新文件仍然没有可执行能力就可以。</p><p>6.Ctrl+alt+t：创建新终端，可以一边看代码，一边调试。<br>Ctrl+shift+t：另起一页终端，用alt1、2、3、4进行切换。</p><p>7.-n显示行号，或者再makefile中意味着模拟执行。</p><p>8.ldd a.out是什么意思？<br>答：查看a.out所需要的动态库的路径。</p><p>9.链接器与动态链接器的区别？<br>答：链接器用来合并数据段与地址回填。而动态链接器用来加载动态库。</p><p>10.-rm -rf为什么rm前加-？<br>答：在rm前加-代表出错误依旧执行的意思。</p><ol start="11"><li>–是长格式命令选项有利于避免冲突，方便记忆，并且–也能表示传参结束，后面加非传参选项</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;-a 与 -r有什么区别？&lt;br&gt;答：-a是以全部的方式(cp)或显示隐藏文件(ls)，-r是以递归的方式。例如在cp拷贝的过程中：使用-a会把原来的时间也拷贝过来，但用-r就会以拷贝的时间作为新文件最后使用的时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.hello.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c++ STL</title>
    <link href="http://example.com/2023/03/10/c-STL/"/>
    <id>http://example.com/2023/03/10/c-STL/</id>
    <published>2023-03-10T00:46:29.000Z</published>
    <updated>2023-03-13T06:41:46.167Z</updated>
    
    <content type="html"><![CDATA[<p>1.利用vector容器中的swap和匿名对象原理能实现什么？<br>答：能实现内存收缩的操作，创建匿名容器x与另一个实际使用率低的容器v互换即可。vector<T>(v).swap(v).拷贝构造一份v给匿名对象x，再交换。</p><p>2.众所周知在给vector容器赋值的过程中，容器的容量会随着添加的数据而不断变化，那么我们如何确定在向vector容器中添加10万个数据中，系统为vector分配了几次内存呢？<br>答：在添加数据的循环体内加入下面这段话：<br>int num&#x3D;0;<br>int * p &#x3D;NULL;<br>if(p!&#x3D;&amp;v[0])<br>{<br>p&#x3D;&amp;v[0];<br>num++;<br>}<br>这里的v是容器，num就是重新分配内存的次数。</p><p>3.由2.引发出的开辟内存空间次数过多的问题如何解决？<br>答：利用reserve预留空间。v.reserve(100000);</p><p>4.函数传参中如果用const修饰容器，那么使用时要注意什么？<br>答：使用iterator时，需要在前面加const：const_iterator.</p><p>5.deque逻辑上是连续的物理上是离散的，那为什么还支持随机存取？<br>答：本不该支持，但为了更完美就支持了。</p><p>6.利用迭代器对容器进行增删只能在头部和尾部嘛？<br>答：可以自己创建迭代器之后自增到想要删除的位置：deque<int>::iterator it&#x3D;di.begin(); it++;</p><p>7.在使用stl中的算法时要包含#include<algorithm>头文件。对于可以随机存取的迭代器都可以用sort进行直接排序。</p><p>8.栈为什么不能遍历？<br>答：因为遍历是非质变算法，但是想要读取栈内元素需要出栈，这是一种质变算法。</p><p>9.调用函数时怎么分辨全局函数和成员函数？<br>答：对象.函数名()&#x2F;&#x2F;这是成员函数。容器List中的sort函数就是成员函数。<br>函数名()&#x2F;&#x2F;这是全局函数。</p><p>10.list.sort()默认模式为升序，我们如何使用降序呢？<br>答：写个函数 bool compare(int v1,int v2){return v1&gt;v2;}&#x2F;&#x2F;如果v1&gt;v2返回值为真（如果前面的v1大于后面的v2成立），在调用list.sort(compare)时，编译器就会降序。具体原理不用太了解。compare函数也称为回调函数。</p><p>11.使用list.sort()对自定义类型数据进行排序时，要写10.中的compare函数来指定如何进行排序。</p><p>12.在set容器中要想改变排序规则要怎么办？<br>答：由于set中只有两种排序要么正序，要么倒序。所以要想改变排序规则要在排序之前进行操作。也就是在生成容器对象时：set&lt;int, 某类型&gt;s2.原本可以用函数名来告诉编译器排序规则，但是set要在生成对象前告诉编译器，所以只能在第二个参数内告诉编译器怎么排序。又因为第二个参数是一个类型，所以不能像上面的list一样直接写函数。要写一个仿函数替代。</p><p>13.在STL中调用算法时传递的参数如果是其中又迭代器，那么参数中要求的func类型应该是仿函数（函数对象），而不是回调函数。</p><p>14.在自定义函数过程中，为什么函数体明明没错误，编译器却还报错？<br>答：有可能传入的参数没有加const修饰，因为版本不同，有的编译器更加严格。</p><p>15.只要声明了一个容器就能向容器中进行赋值吗？<br>答：不能，必须要给容器分配空间才可以（resize）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.利用vector容器中的swap和匿名对象原理能实现什么？&lt;br&gt;答：能实现内存收缩的操作，创建匿名容器x与另一个实际使用率低的容器v互换即可。vector&lt;T&gt;(v).swap(v).拷贝构造一份v给匿名对象x，再交换。&lt;/p&gt;
&lt;p&gt;2.众所周知在给vector容器</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c++ 模板</title>
    <link href="http://example.com/2023/03/08/c-%E6%A8%A1%E6%9D%BF/"/>
    <id>http://example.com/2023/03/08/c-%E6%A8%A1%E6%9D%BF/</id>
    <published>2023-03-08T00:49:15.000Z</published>
    <updated>2023-03-09T03:30:39.346Z</updated>
    
    <content type="html"><![CDATA[<p>1.template<class T>下面写的函数一定是模板嘛？<br>答：一般情况是的。且调用模板时，一定要给T的类型。</p><p>2.使用什么函数可以查看模板参数列表中参数的类型？<br>答：使用函数typeid(参数).name（）。</p><p>3.父类是类模板时，怎么利用子类定义父类中模板参数类型？<br>答：子类也要被定义为模板，并且参数列表中除了自身要用的模板参数，还要加一个父类的模板参数，并用此指定父类的数据类型。</p><p>4.使用模板创建数组对象时，无法访问数组元素怎么办？<br>答：重载[],函数返回值为T&amp;，函数体就是返回数组指针。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.template&lt;class T&gt;下面写的函数一定是模板嘛？&lt;br&gt;答：一般情况是的。且调用模板时，一定要给T的类型。&lt;/p&gt;
&lt;p&gt;2.使用什么函数可以查看模板参数列表中参数的类型？&lt;br&gt;答：使用函数typeid(参数).name（）。&lt;/p&gt;
&lt;p&gt;3.父类是类模</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>职工管理系统</title>
    <link href="http://example.com/2023/03/05/%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2023/03/05/%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-03-05T08:33:07.000Z</published>
    <updated>2023-03-18T00:56:00.217Z</updated>
    
    <content type="html"><![CDATA[<p>1.如果声明了父类，再声明子类会报错，并且即便声明了父类，如果子类在具体实现之前被使用那么编译器仍然找不到子类！即便子类与父类一起声明，只要在未定义子类之前使用他就会报错。最好的方法就是把索要用的子类写在最前面。</p><p>2.职工管理系统在哪里使用到了多态(既是：父类指针&#x3D;new 子类())？<br>答：以添加职工为例，在添加新的职工信息后，需要利用这些信息创建子类，这是用new创建子类放在右侧，用父类指针进行接收。</p><p>3.如果程序内存溢出，那可能是哪出问题了？<br>答：析构函数没有写，或堆区空间未释放，或者堆区空间重复释放(自己释放一遍，析构函数又释放时越界访问)。</p><p>4.ifs.eof()怎么用？<br>答：该函数返回值为真表示文件中没有任何数据，文件为空。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.如果声明了父类，再声明子类会报错，并且即便声明了父类，如果子类在具体实现之前被使用那么编译器仍然找不到子类！即便子类与父类一起声明，只要在未定义子类之前使用他就会报错。最好的方法就是把索要用的子类写在最前面。&lt;/p&gt;
&lt;p&gt;2.职工管理系统在哪里使用到了多态(既是：父类</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++ 9</title>
    <link href="http://example.com/2023/03/01/C++9/"/>
    <id>http://example.com/2023/03/01/C++9/</id>
    <published>2023-03-01T00:46:29.000Z</published>
    <updated>2023-03-01T11:21:09.990Z</updated>
    
    <content type="html"><![CDATA[<p>1.什么是虚函数？<br>答：首先虚函数必须是基类的非静态成员函数！在前面加上virtual即变为虚函数。生成虚函数后会在类内生成指针”vfptr”(在类内)，指针指向”vftable表”(不在类内)，表中是该虚函数的入口地址。</p><p>2.虚函数有什么用？<br>答：声明虚函数后，子类会继承父类的”vfptr”指针与”vftable”，在重写父类虚函数前”vftable”内函数地址与父类相同，重写会使”vftable”中父类虚函数地址被重写后函数地址覆盖。</p><p>3.什么是多态？<br>答：一：有继承关系，二：子类必须重写（函数声明一样函数体不一样）父类的虚函数。</p><p>4.C++中可以使用父类引用接收子类对象，这个特点应该结合虚函数使用，实现动态多态。</p><p>5.什么是动态多态？<br>答：动态多态的函数地址晚绑定，由于调用的对象不同，可以有多种形态去调用公共接口，运行阶段确定函数地址。当父类指针或引用(不是vfptr)指向子类对象(是父类中vftable中记录的地址被修改为子类对象的vftable中记录的初始地址)会发生动态多态。<br>具体效果是：不再是静态多态发生时只调用父类成员函数的情况，而是哪个对象使用接口就调用哪个对象的成员函数。</p><p>6.堆区属性没有释放干净会导致内存泄漏。</p><p>7.在不适用虚析构的情况下，父类指针在析构的时候，不会调用子类的析构函数，导致子类如果有队去属性，会出现内存泄漏的情况，我们要怎么处理？<br>答：与实现动态多态类似，可以在父类析构函数前加virtual实现虚析构，原理也类似，父类生成指针指向表，表中初始值为父类析构函数地址。在子类重写后表中为子类析构函数地址。与虚函数不同的是(纯)虚函数可以不要代码实现，但(纯)虚析构一定要有代码实现并一定会被执行，因为基类也可以new申请空间。</p><p>8.纯虚析构是类内声明，类外实现。只要有纯虚析构一定是抽象类，无法实例化对象。通过虚析构可以解决通过父类释放子类对象的问题。</p><p>9.除了使用虚析构还有什么方法能释放子类在堆中的对象？<br>答：新建一个类，把子类对象的指针传入，之后在新类的析构函数中释放子类对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.什么是虚函数？&lt;br&gt;答：首先虚函数必须是基类的非静态成员函数！在前面加上virtual即变为虚函数。生成虚函数后会在类内生成指针”vfptr”(在类内)，指针指向”vftable表”(不在类内)，表中是该虚函数的入口地址。&lt;/p&gt;
&lt;p&gt;2.虚函数有什么用？&lt;br&gt;答</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 1</title>
    <link href="http://example.com/2023/02/28/Linux-1/"/>
    <id>http://example.com/2023/02/28/Linux-1/</id>
    <published>2023-02-28T09:02:20.000Z</published>
    <updated>2023-04-05T06:04:46.528Z</updated>
    
    <content type="html"><![CDATA[<p>1.Linux磁盘分区的步骤？<br>答：第一步分区，第二步写入文件系统格式化，第三步给硬盘与分区起名，第四步挂载。</p><p>2.Linux文件系统格式特点？<br>答：从物理存储看&#x2F;,boot,hoom,都是地位相同的分区，但是从物理上看’&#x2F;‘是最底层的分区，boot与hoom都是’&#x2F;‘的子目录。</p><p>3.errno可以想象为os定义的全局变量可直接当整型使用。但要引用头文件，errno.h。之后用strerror(errno)返回string类型可以用%s打印，strerror的头文件是string.h。</p><p>4.*与%都是通配符，但是%有锁定的意味。</p><p>5.在使用vim的时候千万不要用Ctrl+s否则vim会卡死，使用Ctrl+q可以退出卡死状态</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.Linux磁盘分区的步骤？&lt;br&gt;答：第一步分区，第二步写入文件系统格式化，第三步给硬盘与分区起名，第四步挂载。&lt;/p&gt;
&lt;p&gt;2.Linux文件系统格式特点？&lt;br&gt;答：从物理存储看&amp;#x2F;,boot,hoom,都是地位相同的分区，但是从物理上看’&amp;#x2F;‘是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>day 9</title>
    <link href="http://example.com/2023/02/28/C++8/"/>
    <id>http://example.com/2023/02/28/C++8/</id>
    <published>2023-02-28T01:08:34.000Z</published>
    <updated>2023-02-28T07:44:38.400Z</updated>
    
    <content type="html"><![CDATA[<p>1.声明重载函数的规则？<br>答：以重载关系运算符为例，判断：对象1&#x3D;&#x3D;对象2，此时使用成员函数重载会看作对象1在调用对象2。故可以写void  operator&#x3D;&#x3D;(类名  &amp;对象2).</p><p>2.什么是仿函数？<br>答：重载().</p><p>3.子类与继承的父类成员重名会怎么样？<br>答：同名子类成员会隐藏父类成员，同名子类成员函数会隐藏所有（重载）父类同名成员函数。</p><p>4.什么是菱形继承问题，要怎么解决？<br>答：继承图是一个菱形，进而导致孙子类继承了两份爷爷类的数据，而不知道使用哪个的问题。使用虚继承的方式，用virtual关键字修饰爷爷类，称为虚基类。从而使孙子所继承的成员的值是两个父亲两次赋值中的最后一次的数据。<br>注意：虚继承底层是把两个父亲继承的成员变量修改为指针，指向了虚基类的成员变量（爷爷的成员变量）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.声明重载函数的规则？&lt;br&gt;答：以重载关系运算符为例，判断：对象1&amp;#x3D;&amp;#x3D;对象2，此时使用成员函数重载会看作对象1在调用对象2。故可以写void  operator&amp;#x3D;&amp;#x3D;(类名  &amp;amp;对象2).&lt;/p&gt;
&lt;p&gt;2.什么是仿函数？&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>day 8</title>
    <link href="http://example.com/2023/02/27/C++7/"/>
    <id>http://example.com/2023/02/27/C++7/</id>
    <published>2023-02-27T00:52:49.000Z</published>
    <updated>2023-02-27T09:41:39.737Z</updated>
    
    <content type="html"><![CDATA[<p>1.this指针如何解决命名冲突的问题？<br>答：由于命名不规范导致成员函数内的参数名与类内成员名相同，进而调用成员函数给类内成员赋值时导致命名冲突，此时可使用this指针指向成员。this指向的永远是调用成员函数的对象。</p><p>2.如何理解返回this*时要求函数返回类型是[类名&amp;]而不是[类名]？<br>答：最关键的是如果返回类名，那么会调用默认拷贝构造函数创建一个新的对象，新对象内成员的值就是原对象的值！而返回值为类&amp;时相当于：类名&amp;  (被返回的)变量名&#x3D;*this（类名  &amp;变量名&#x3D;*this），返回的就是原对象本身。</p><p>3.阐述空指针有时可以调用成员函数有时却不能的原因。<br>答：空指针能调用的成员函数大都是共有的与静态成员变量类似，不属于某一个对象，所以谁都可以调用。而当空指针调用的函数使用到了成员变量时，这个成员变量是对象特有的，便不能访问。</p><p>4.怎么重载左移运算符？<br>答：在c++中只能使用全局函数重载cout&#x2F;cin，否则必须修改标准输入输出的类。右移运算符重载是要重载cout，cout是ostream类型，且cout在c++中唯一，所以使用operator时要加引用。又因为cout属于链式函数，想要链式使用必须有返回值且返回值是cout。<br>eg: ostream &amp; operator&lt;&lt;(ostream &amp;cout,类名 &amp;某对象)；(&amp;cout必须在&amp;某对象前面才能做出[cout&lt;&lt; 某对象],否则这俩位置相反，这也是无法使用成员函数重载的原因)。<br>注意：重载函数中第一个参数只是cout的别名，也可以写成out。</p><p>5.重载++运算符时如何区分前置与后置？<br>答：靠参数区分，前置++无参，后置++有int占位参数。由于后置++函数体实现依靠：先记录“类名 tmp&#x3D;*this”,再加1，最后返回tmp(是局部变量!)，并不是本身因为本身已经+1了，不是后置++要的结果。所以返回值类型不加引用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.this指针如何解决命名冲突的问题？&lt;br&gt;答：由于命名不规范导致成员函数内的参数名与类内成员名相同，进而调用成员函数给类内成员赋值时导致命名冲突，此时可使用this指针指向成员。this指向的永远是调用成员函数的对象。&lt;/p&gt;
&lt;p&gt;2.如何理解返回this*时要求函</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>day 7</title>
    <link href="http://example.com/2023/02/26/C++6/"/>
    <id>http://example.com/2023/02/26/C++6/</id>
    <published>2023-02-26T01:18:51.000Z</published>
    <updated>2023-03-11T10:06:37.863Z</updated>
    
    <content type="html"><![CDATA[<p>1.拷贝构造函数的第二种调用时机？<br>答：利用函数的值传递方式，这样操作会拷贝一份传入的对象，此时调用了拷贝构造函数。</p><p>2.拷贝构造函数的第三种调用时机？<br>答：利用函数返回值（为对象）返回局部变量的时候会调用拷贝构造，因为局部变量随着函数结束而销毁，但是返回值要求是对象，故只能拷贝生成新对象返回。</p><p>3.浅拷贝的定义以及带来的问题？<br>答：浅拷贝就是编译器提供的默认拷贝，由于栈的特性“先进后出”，一旦函数体内包含两个对象且对象里包含堆区指针，在调用析构函数时（包含delete）就会出现堆区内存重复释放的问题。</p><p>4.如何解决深拷贝带来的问题？<br>答：自己写构造函数，用new新建堆区内存代替原来直接赋值的操作。</p><p>5.本类中有其它类的对象时，时先构造哪个类，先析构哪个类？<br>答：先构造其他类的对象，在构造本身。析构恰恰相反，先析构本身。</p><p>6.如何理解静态成员变量中的“类内声明，类外初始化”？<br>答：声明就是定义个变量的意思，没有赋值操作，在类定义的外面才有初始化也就是赋值的操作。</p><p>7.由于静态成员变量是所有对象共有的所以除了用对象进行访问还可以怎么访问？<br>答：还可以用：“类名：：静态成员变量”，的方式访问。</p><p>8.为什么静态成员函数只能访问静态成员变量？<br>答：因为在类定义中的非静态成员变量不知道是哪个对象调用的。</p><p>9.当函数传递的参数为类的时候，为什么要使用引用？<br>答：使用引用会防止拷贝构造的出现。因为在函数内要生成局部变量，如果不传引用，那么就要创建对象，此时会调用拷贝构造。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.拷贝构造函数的第二种调用时机？&lt;br&gt;答：利用函数的值传递方式，这样操作会拷贝一份传入的对象，此时调用了拷贝构造函数。&lt;/p&gt;
&lt;p&gt;2.拷贝构造函数的第三种调用时机？&lt;br&gt;答：利用函数返回值（为对象）返回局部变量的时候会调用拷贝构造，因为局部变量随着函数结束而销毁，</summary>
      
    
    
    
    
  </entry>
  
</feed>
